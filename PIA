# Verificar si PowerShell se ejecuta como Administrador
function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    $adminRole = [Security.Principal.WindowsBuiltInRole]::Administrator
    if (-not $principal.IsInRole($adminRole)) {
        Write-Error "Este script debe ejecutarse como Administrador. Ejecuta PowerShell como Administrador e inténtalo de nuevo."
        exit 1
    }
}

# Verificar conexión a Internet
function Test-InternetConnection {
    try {
        $url = "https://www.google.com"
        $request = [System.Net.WebRequest]::Create($url)
        $request.Timeout = 5000
        $response = $request.GetResponse()
        $response.Close()
        Write-Host "Conexión a Internet detectada"
    } catch {
        Write-Error "No hay conexión a Internet. Por favor, verifica tu conexión y vuelve a intentarlo."
        exit 1
    }
}

# Verificar y actualizar versión de PowerShell
function Update-PowerShell {
    $currentVersion = $PSVersionTable.PSVersion
    if ($currentVersion.Major -lt 7) {
        Write-Host "Actualizando PowerShell a la versión 7 o superior..."
        $installerUrl = "https://aka.ms/win32-x64/powershell-7.4.0-win-x64.msi"
        $outputPath = "$env:TEMP\PowerShell-Installer.msi"

        # Descargar el instalador
        Invoke-WebRequest -Uri $installerUrl -OutFile $outputPath

        # Instalar PowerShell de manera silenciosa
        Start-Process -FilePath msiexec.exe -ArgumentList "/i `"$outputPath`" /quiet /norestart" -Wait
        
        # Limpiar el archivo de instalación
        Remove-Item $outputPath -Force
    } else {
        Write-Host "La versión de PowerShell está actualizada: $currentVersion"
    }
}

# Instalar .NET Framework 3.5
function Install-DotNet35 {
    try {
        Write-Host "Instalando .NET Framework 3.5..."
        Start-Process -FilePath "DISM" -ArgumentList "/Online", "/Enable-Feature", "/FeatureName:NetFx3", "/All" -Wait
        Write-Host ".NET Framework 3.5 se ha instalado correctamente."
    } catch {
        Write-Error "Error al instalar .NET Framework 3.5: $_"
    }
}

# Instalar o actualizar Chocolatey
function Install-Update-Chocolatey {
    if (!(Get-Command choco.exe -ErrorAction SilentlyContinue)) {
        Write-Host "Instalando Chocolatey..."
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
        Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    } else {
        Write-Host "Chocolatey ya está instalado. Actualizando..."
        choco upgrade chocolatey -y
    }
}

# Instalar o actualizar programas con Chocolatey
function Install-Programs {
    $programs = @(
        "winrar",
        "7zip",
        "opera",
        "crystaldiskinfo",
        "hwinfo",
        "hwmonitor",
        "malwarebytes",
        "sumatrapdf",
        "bulk-crap-uninstaller",
        "vlc",
        "driverbooster",
        "anydesk.install"  # Asegura la instalación correcta de AnyDesk
    )
    
    $totalPrograms = $programs.Count
    $currentProgram = 0

    foreach ($program in $programs) {
        $attempt = 0
        $currentProgram++
        Write-Progress -Activity "Instalando programas..." -Status "$program" -PercentComplete (($currentProgram / $totalPrograms) * 100)
        
        while ($attempt -lt 3) {
            try {
                $attempt++
                $installedPackage = choco list --local-only | Select-String $program
                if ($installedPackage) {
                    Write-Host "$program ya está instalado, verificando actualizaciones..."
                    choco upgrade $program --force --force-dependencies -y
                } else {
                    Write-Host "Instalando $program..."
                    choco install $program --force --force-dependencies -y
                }
                break
            } catch {
                Write-Warning "Error al intentar instalar/actualizar ${program}, reintentando ($attempt/3)..."
                if ($attempt -eq 3) {
                    Write-Error "Falló la instalación de $program después de 3 intentos: $_"
                }
            }
        }
    }
}

# Actualizar Microsoft Store o repararlo si es necesario
function Repair-Update-MicrosoftStore {
    $storePackage = Get-AppxPackage -AllUsers Microsoft.WindowsStore -ErrorAction SilentlyContinue
    if ($storePackage) {
        Write-Host "Microsoft Store encontrado, reparando y actualizando..."
        foreach ($package in $storePackage) {
            Add-AppxPackage -DisableDevelopmentMode -Register "$($package.InstallLocation)\AppxManifest.xml"
        }
    } else {
        Write-Host "Microsoft Store no encontrado, omitiendo..."
    }
}

# Ejecutar todas las funciones en orden
Test-Administrator
Test-InternetConnection
Update-PowerShell
Install-Update-Chocolatey
Install-DotNet35
Install-Programs
Repair-Update-MicrosoftStore

Write-Host "Todas las tareas han sido completadas con éxito."
